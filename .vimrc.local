augroup ts
  autocmd!
  autocmd FileType typescript JsPreTmpl html
  " autocmd FileType typescript syn clear foldBraces
augroup END

augroup go
  autocmd!

  " Show by default 4 spaces for a tab
  autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4

  au FileType go nmap <leader>gt :GoDeclsDir<cr>

  " :GoBuild and :GoTestCompile
  autocmd FileType go nmap <leader>b :GoBuild<CR>
  autocmd FileType go nmap <leader>c :GoMetaLinter<CR>
  let g:ale_linters = {'go': ['gometalinter', 'gofmt']}
  " " :GoTest
  " autocmd FileType go nmap <leader>t  :GoTest<CR>

  " " :GoRun
  " " autocmd FileType go nmap <leader>r  <Plug>(go-run)

  " " :GoDoc
  " autocmd FileType go nmap <Leader>d <Plug>(go-doc)

  " " :GoCoverageToggle
  " " autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)

  " " :GoInfo
  " autocmd FileType go nmap <Leader>i <Plug>(go-info)

  " " :GoMetaLinter
  " " autocmd FileType go nmap <Leader>l <Plug>(go-metalinter)

  " " :GoDef but opens in a vertical split
  " autocmd FileType go nmap <Leader>v <Plug>(go-def-vertical)
  " " :GoDef but opens in a horizontal split
  " autocmd FileType go nmap <Leader>s <Plug>(go-def-split)

  " :GoAlternate  commands :A, :AV, :AS and :AT
  " autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
  " autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
  " autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
  " autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')
augroup END

" keyboard shortcuts
inoremap jj <ESC>

" highlight search
"set hlsearch
"nmap <leader>hl :let @/ = ""<CR>

" gui settings
if (&t_Co == 256 || has('gui_running'))
  if ($TERM_PROGRAM == 'iTerm.app')
    set termguicolors
    syntax on
    set background=light
    colorscheme solarized
    " set background=dark
    " colorscheme onedark
    " colorscheme seoul256
    " colorscheme space-vim-dark
    " let g:airline_theme='violet'
    " colorscheme OceanicNext
    let g:airline_theme='oceanicnext'
    " let g:seoul256_background = 256
    " colorscheme pencil
    " let g:onedark_termcolors=256
  else
    set termguicolors
    syntax enable
    set background=light
    colorscheme solarized
    " set background=dark
    " "colorscheme desert
    " colorscheme onedark
    " colorscheme space-vim-dark
    " let g:airline_theme='violet'
    " colorscheme OceanicNext
    let g:airline_theme='oceanicnext'
    " let g:seoul256_background = 250
    " colo seoul256
  endif
endif

if &term =~ '256color'
  " disable Background Color Erase (BCE)
  set t_ut=
endif

" Disambiguate ,a & ,t from the Align plugin, making them fast again.
"
" This section is here to prevent AlignMaps from adding a bunch of mappings
" that interfere with the very-common ,a and ,t mappings. This will get run
" at every startup to remove the AlignMaps for the *next* vim startup.
"
" If you do want the AlignMaps mappings, remove this section, remove
" ~/.vim/bundle/Align, and re-run rake in maximum-awesome.
function! s:RemoveConflictingAlignMaps()
  if exists("g:loaded_AlignMapsPlugin")
    AlignMapsClean
  endif
endfunction
command! -nargs=0 RemoveConflictingAlignMaps call s:RemoveConflictingAlignMaps()
silent! autocmd VimEnter * RemoveConflictingAlignMaps

nnoremap <leader>2 :vert sb<CR>
"set cursorline
"
"# filenames like *.xml, *.html, *.xhtml, ...
let g:closetag_filenames = "*.html,*.xhtml,*.erb,*.js,*.jsx"
set cursorline
" performance
set nocompatible
set ttyfast
" set lazyredraw
let g:jsx_ext_required = 0 " Allow JSX in normal JS files
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_typescript_checkers = ['tslint', 'tsuquyomi']
let g:syntastic_aggregate_errors = 1

" go things
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
" let g:go_auto_type_info = 1
let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck']
let g:go_metalinter_autosave = 1
let g:go_metalinter_autosave_enabled = ['vet', 'golint']
" let g:syntastic_go_checkers = ['govet', 'errcheck', 'golint', 'go']
" set completeopt-=preview
autocmd FileType go nmap <Leader>i <Plug>(go-info)
let g:go_fmt_command = "goimports"
" /go things
set foldmethod=syntax
set foldlevelstart=99
set autowrite

" fzf things
nmap ; :Buffers<CR>
nmap <Leader>t :Files<CR>

" easy align
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
